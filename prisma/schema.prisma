generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  User
  Admin
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum Difficulty {
  Unknown
  Easy
  Medium
  Hard
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  role          Role    @default(User)

  points         Int       @default(0)
  currentStreak  Int       @default(0)
  lastActiveDate DateTime?
  guideCompleted Boolean   @default(false)

  words           Word[]            @relation("wordToUser")
  userPreferences UserPreferences[]
  paidPlan        PaidPlan[]
  paymentHistory  PaymentHistory[]
  createdAt       DateTime
  updatedAt       DateTime
  sessions        Session[]
  accounts        Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model PaidPlan {
  id        String           @id @default(cuid())
  userId    String
  until     DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  isActive  Boolean          @default(true)
  metadata  Json?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  PaymentHistory[]

  @@map("paidPlan")
}

model PaymentHistory {
  id            String        @id @default(cuid())
  userId        String
  amount        Float
  currency      String        @default("RUB")
  paymentId     String?       @unique
  paymentMethod String        @default("yookassa")
  metadata      Json?
  status        PaymentStatus @default(Completed)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paidPlanId    String?
  paidPlan      PaidPlan?     @relation(fields: [paidPlanId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("paymentHistory")
}

model Categories {
  id   Int    @id
  name String
  word Word[]

  @@map("categories")
}

model Word {
  id         String       @id
  name       String
  categories Categories[]
  collection Collection[]
  user       User[]       @relation("wordToUser")
  difficulty Difficulty   @default(Unknown)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("word")
}

model Collection {
  id        String   @id
  name      String
  words     Word[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("collection")
}

model UserPreferences {
  id          String      @id
  wordsPerDay Int
  difficulty  Difficulty?
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?

  @@map("userPreferences")
}
