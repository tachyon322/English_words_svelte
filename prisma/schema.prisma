generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  name            String
  email           String            @unique
  emailVerified   Boolean
  image           String?
  role            Role              @default(User)
  points          Int               @default(0)
  currentStreak   Int               @default(0)
  lastActiveDate  DateTime?
  guideCompleted  Boolean           @default(false)
  createdAt       DateTime
  updatedAt       DateTime
  accounts        Account[]
  paidPlan        PaidPlan[]
  paymentHistory  PaymentHistory[]
  sessions        Session[]
  userPreferences UserPreferences[]
  collections     Collection[]      @relation("CollectionToUser")
  userWords       UserWord[]        @relation // Новая связь с UserWord

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model PaidPlan {
  id        String           @id @default(cuid())
  userId    String
  until     DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  isActive  Boolean          @default(true)
  metadata  Json?
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments  PaymentHistory[]

  @@map("paidPlan")
}

model PaymentHistory {
  id            String        @id @default(cuid())
  userId        String
  amount        Float
  currency      String        @default("RUB")
  paymentId     String?       @unique
  paymentMethod String        @default("yookassa")
  metadata      Json?
  status        PaymentStatus @default(Completed)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  paidPlanId    String?
  paidPlan      PaidPlan?     @relation(fields: [paidPlanId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("paymentHistory")
}

model Categories {
  id   Int    @id
  name String
  word Word[] @relation("CategoriesToWord")

  @@map("categories")
}

model Word {
  id                   Int          @id @default(autoincrement())
  name                 String
  translationToRussian String
  difficulty           Difficulty   @default(Unknown)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  categories           Categories[] @relation("CategoriesToWord")
  collection           Collection[] @relation("CollectionToWord")
  userWords            UserWord[]   @relation // Новая связь с UserWord

  @@map("word")
}

model UserWord {
  id           String     @id @default(cuid())
  userId       String
  wordId       Int
  status       WordStatus @default(Added) // Статус слова: Добавлено или Выучено
  addedAt      DateTime   @default(now()) // Когда слово было добавлено
  learnedAt    DateTime? // Когда слово было отмечено как выученное (если применимо)
  progress     Int        @default(0) // Прогресс изучения (например, % или кол-во правильных ответов)
  lastReviewed DateTime? // Дата последнего повторения
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  word         Word       @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([userId, wordId]) // Гарантирует, что пользователь не может добавить одно слово дважды
  @@map("userWord")
}

enum WordStatus {
  Added // Слово добавлено для изучения
  Learned // Слово выучено
}

model Collection {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User[]   @relation("CollectionToUser")
  words     Word[]   @relation("CollectionToWord")

  @@map("collection")
}

model UserPreferences {
  id          String      @id
  wordsPerDay Int
  difficulty  Difficulty?
  userId      String?
  User        User?       @relation(fields: [userId], references: [id])

  @@map("userPreferences")
}

enum Role {
  User
  Admin
}

enum PaymentStatus {
  Pending
  Completed
  Failed
}

enum Difficulty {
  Unknown
  Easy
  Medium
  Hard
}
